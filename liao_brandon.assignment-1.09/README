This program generates a random 80x21 dungeon layout with rooms, corridors, and staircases. Rooms are placed until the maximum number of rooms have been 
placed or the maximum number of attempts has been reached and an x/y coordinate pathing algorithm is used to connect rooms. Staircases are randomly placed
on floor tiles within the dungeon (currently only 1 up and down staircase). Monsters are randomly generated and placed within the dungeon with each monster 
having the capability of possessing certain attributes (intelligence, telepathy, tunneling, erratic behavior). Based on the attributes monsters either use pathfinding 
to find and approach the PC or move randomly with tunneling monsters having the ability to tunnel through walls. 
This iteration of the dungeon generator implements the ability to pickup, wear, takeoff, drop, expunge, and inspect items/equipment from the dungeon floor. Item/Equipment pickup is implemented with a 
manual pickup command which brings up a item pickup display (in case of stacked items) and prompts which item the PC wants to pickup. After picking up an item the PC has the option to wear,
take off, drop, expunge, or inspect the item. Worn items will be displayed in the equipment screen and add stat benefits to the PC during combat, taking off an Item/Equipment piece will return the Item/Equipment piece to the inventory screen (if not full), dropped Item/Equipment pieces will return to the dungeon floor at the PC's current position, expunged items will be deleted from the dungeon completely, and insepcting an Item/Equipment piece will display the description of the item. 
This iteration of the dungeon generator also implements an updated combat system, NPC's no longer attack each other and instead are displaced when moving into the same cell, combat now implements a attack damage and hitpoint system where combat is initialized by moving into the cell of a defensive character. When an attack connects, the attack damage is calculated by rolling all applicable damage dice (NPC's have one set, PC has both base set and weapon set (all other attack damage bonuses from equipment are rolled and added to the weapon set)). Character hitpoints are reduced by calculated attack damage and if hitpoints ever fall to below 0, the character dies and is removed from the dungeon (game over if PC dies). The game ends with a win if the PC kills an NPC with the BOSS flag instead of clearing all NPC's in a dungeon. (Note: There was nothing in 1.09 or 1.08 specs mentioning BOSS generation so I have kept the 1.08 monster generation. If the BOSS is not generated in the current dungeon the PC will have to keep regenerating dungeons (going up and down staircases) until the BOSS is generated).
This iteration of the dungeon generator also implements a new command ('L') which allows you to target, select, and display specific monsters in the dungeon. 'L' enters a targeting mode (similar to teleport command) when selecting a visible monster with 't' the description of the selected monster will be displayed and using ESC will abort the command. 

Users should compile the code with the following format: g++ -Wall -Werror -ggdb dungeon_generator.cpp heap.cpp monsters.cpp dungeon.cpp print.cpp sprite.cpp monster.cpp pc.cpp dice.cpp item.cpp object_fac.cpp monster_fac.cpp -lm -lncurses -o dungeon_generator
Or use the Makefile with the following format: make dungeon_generator
Users should run the program with the following formats: 
./dungeon_generator to generate a random dungeon.
./dungeon_generator --save to generate a random dungeon and save to file or save the loaded dungeon back to file.
./dungeon_generator --load to load the dungeon from file. 
./dungeon_generator --nummon to generate a dungeon with a specific number of monsters, put the number of monsters you would like to generate after the --nummon flag eg 1,2,3,etc (Note: when using the --nummon flag with --load or --save, use the --nummon flag before the --load or --save flag).